typedef
  False = forall C:*, C;
  True  = forall C:*, C -> C;
  Not   = \A:*, A -> False;
  And   = \A:*, \B:*, forall C:*, (A -> B -> C) -> C;
  Or    = \A:*, \B:*, forall C:*, (A -> C) -> (B -> C) -> C;
end


var 
  A:*;
  B:*;
  lem: (forall U:*, Or U (U->False));
  x: (And A B) -> False;
  y: A;
end


let

  true = \\C:*. \a:C. \b:C. a;
  false = \\C:*. \a:C. \b:C. b;
  single        = \\C:*. \c:C. c;                        
  elimBot       = \\A:*. \f:False. f [A];               

  pair          = \\A:*. \\B:*. \a:A. \b:B. \\C:*. \f:A->B->C. f a b;
  fst           = \\A:*. \\B:*. \p:And A B. p [A] (\a:A.\b:B.a) ;
  snd           = \\A:*. \\B:*. \p:And A B. p [B] (\a:A.\b:B.b) ;

  left          = \\A:*. \\B:*. \a:A. \\C:*. \f:A->C. \g:B->C. f a;
  right         = \\A:*. \\B:*. \b:B. \\C:*. \f:A->C. \g:B->C. g b;
  case          = \\A:*. \\B:*. \\D:*. \u:Or A B. \f:A->D. \g:B->D. u [D] f g;

-- 5) ¬ (A ^ B) portanto ¬A v ¬B
-- equivalente a (A ^ B) -> False portanto A -> False v B -> False
 i5 = \a:Or (A -> False) (B -> False).a;
 l5 = left [A->False] [B->False] (case [B] [B->False] [B->False] (lem [B]) (\z:B. case [A] [A->False] [False] (lem [A]) (\y:A. x pair [A] [B] (y) (z)) (\w:A->False. w y)) (\a:B->False. a));

in
 l5
  
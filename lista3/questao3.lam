typedef
  False = forall C:*, C;
  True  = forall C:*, C -> C;
  Not   = \A:*, A -> False;
  And   = \A:*, \B:*, forall C:*, (A -> B -> C) -> C;
  Or    = \A:*, \B:*, forall C:*, (A -> C) -> (B -> C) -> C;
end


var 
  A:*;
  B:*;
  C:*;
  x:And (Or A B) C;
  y:B -> A;
end


let

  true = \\C:*. \a:C. \b:C. a;
  false = \\C:*. \a:C. \b:C. b;
  single        = \\C:*. \c:C. c;                        
  elimBot       = \\A:*. \f:False. f [A];               

  pair          = \\A:*. \\B:*. \a:A. \b:B. \\C:*. \f:A->B->C. f a b;
  fst           = \\A:*. \\B:*. \p:And A B. p [A] (\a:A.\b:B.a) ;
  snd           = \\A:*. \\B:*. \p:And A B. p [B] (\a:A.\b:B.b) ;

  left          = \\A:*. \\B:*. \a:A. \\C:*. \f:A->C. \g:B->C. f a;
  right         = \\A:*. \\B:*. \b:B. \\C:*. \f:A->C. \g:B->C. g b;
  case          = \\A:*. \\B:*. \\D:*. \u:Or A B. \f:A->D. \g:B->D. u [D] f g;

-- 3) (A v B) ^ C, B portanto A ^ C
  i3 = \a:(And A C).a;
  l3 = pair [A] [C] (case [A] [B] [A] (fst [Or A B] [C] x)(\w:A. w) (\z:B. y z)) 
  (snd [Or A B] [C] x)
in
  i3 l3
typedef
  False = forall C:*, C;
  True  = forall C:*, C -> C;
  Not   = \A:*, A -> False;
  And   = \A:*, \B:*, forall C:*, (A -> B -> C) -> C;
  Or    = \A:*, \B:*, forall C:*, (A -> C) -> (B -> C) -> C;
end


var 
  A:*;
  B:*;
  C:*;
  D:*;
  x:(Or A B) -> (And C D);
  y:A;
end


let

  true = \\C:*. \a:C. \b:C. a;
  false = \\C:*. \a:C. \b:C. b;
  single        = \\C:*. \c:C. c;                        
  elimBot       = \\A:*. \f:False. f [A];               

  pair          = \\A:*. \\B:*. \a:A. \b:B. \\C:*. \f:A->B->C. f a b;
  fst           = \\A:*. \\B:*. \p:And A B. p [A] (\a:A.\b:B.a) ;
  snd           = \\A:*. \\B:*. \p:And A B. p [B] (\a:A.\b:B.b) ;

  left          = \\A:*. \\B:*. \a:A. \\C:*. \f:A->C. \g:B->C. f a;
  right         = \\A:*. \\B:*. \b:B. \\C:*. \f:A->C. \g:B->C. g b;
  case          = \\A:*. \\B:*. \\D:*. \u:Or A B. \f:A->D. \g:B->D. u [D] f g;

-- 2) A v B -> C ^ D, A portanto D v B
  i2 = \a:(Or D B).a;
  l2 = left [D] [B] (snd [C] [D] (x (left [A] [B] y)));
in
  l2
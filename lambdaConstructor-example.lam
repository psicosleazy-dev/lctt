var
U:*;
P:U->*;
Q:U->*;
h0: ||x:U. P x;
h1: ||y:U. P y -> Q y;
h2: ||C:*. (||u:U. P u. C) -> C;
end


let
  False = ΠC:*. C;
  True  = ΠC:*. C -> C;
  Not   = λA:*. A -> False;
  And   = λA:*. λB:*. ΠC:*. (A -> B -> C) -> C;
  Or    = λA:*. λB:*. ΠC:*. (A -> C) -> (B -> C) -> C;
  ALL = \U:*. \P:U->*. ||x:U.P x;
  allIntro = \U:*. \P:U->*. \x:U. P x;
  allElim = \U:*.\P:U->*. \f:(ALL P U). \z:U. f z;
  EX = \U:*.\P:U->*. ||C:*. (||u:U. ||h:P u. C) -> C;
  exIntro = \U:*.\P:U->*. \z:U. \h:P z. \C:*. \f:(||u:U. P u -> C). f z h;
  exElim =  \U:*.\P:U->*. \Q:*. \e:EX U P. \f:(||u:U. P u -> Q). e Q f;
  
  single   = \C:*. \c:C. c;                        
  elimBot  = \A:*. \f:False. f A;               
  pair     = \A:*. \B:*. \a:A. \b:B. \C:*. \f:A->B->C. f a b;
  fst      = \A:*. \B:*. \p:And A B. p A (\a:A.\b:B.a) ;
  snd      = \A:*. \B:*. \p:And A B. p B (\a:A.\b:B.b) ;
  left     = \A:*. \B:*. \a:A. \C:*. \f:A->C. \g:B->C. f a;
  right    = \A:*. \B:*. \b:B. \C:*. \f:A->C. \g:B->C. g b;
  case     = \A:*. \B:*. \D:*. \u:Or A B. \f:A->D. \g:B->D. 
u D f g;
  -- ex: forall x P x, forall y P y, portanto forall z Q z
  ex1 = \z:U. (h1 z) (h0 z);
  -- ex2: existe x P x, forall y P y -> Q y, portanto existe z Q z
  ex2 = exElim U P (EX U Q). h2 (\x0:U. \g:P x0. (exIntro U Q x0 (h1 x0 g)));

in
  single